(undo-tree-save-format-version . 1)
"3c447f2fb9e34bc81eee1d365baab904a9df9836"
[nil nil nil nil (25336 60595 370858 220000) 0 nil]
([nil nil ((#("extern crate gfx_graphics;
extern crate gfx;
extern crate gfx_device_gl;
extern crate piston_window;" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-keyword-face fontified t) 12 27 (fontified t) 27 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 39 (face font-lock-keyword-face fontified t) 39 45 (fontified t) 45 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 57 (face font-lock-keyword-face fontified t) 57 73 (fontified t) 73 79 (face font-lock-keyword-face fontified t) 79 80 (fontified t) 80 85 (face font-lock-keyword-face fontified t) 85 100 (fontified t)) . 214) (undo-tree-id0 . -100) (undo-tree-id1 . -100) (undo-tree-id2 . -100) (undo-tree-id3 . -100) (t 25336 59498 972458 644000)) nil (25336 60595 370854 312000) 0 nil])
([nil nil ((#("use gfx::{traits::*, Encoder};
use gfx::format::{DepthStencil, Formatted, Srgba8};
use gfx::memory::Typed;
use gfx_graphics::{Flip, Gfx2d,};
use piston_window::*;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 16 (face font-lock-constant-face fontified t) 16 21 (fontified t) 21 28 (face font-lock-type-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 31 (fontified t) 31 34 (face font-lock-keyword-face fontified t) 34 35 (fontified t) 35 38 (face font-lock-constant-face fontified t) 38 40 (fontified t) 40 46 (face font-lock-constant-face fontified t) 46 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 61 (face font-lock-type-face fontified t) 61 63 (fontified t) 63 72 (face font-lock-type-face fontified t) 72 74 (fontified t) 74 80 (face font-lock-type-face fontified t) 80 81 (face (rainbow-delimiters-depth-1-face) fontified t) 81 83 (fontified t) 83 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 90 (face font-lock-constant-face fontified t) 90 92 (fontified t) 92 98 (face font-lock-constant-face fontified t) 98 100 (fontified t) 100 105 (face font-lock-type-face fontified t) 105 107 (fontified t) 107 110 (face font-lock-keyword-face fontified t) 110 111 (fontified t) 111 123 (face font-lock-constant-face fontified t) 123 125 (fontified t) 125 126 (face (rainbow-delimiters-depth-1-face) fontified t) 126 130 (face font-lock-type-face fontified t) 130 132 (fontified t) 132 137 (face font-lock-type-face fontified t) 137 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-1-face) fontified t) 139 141 (fontified t) 141 144 (face font-lock-keyword-face fontified t) 144 145 (fontified t) 145 158 (face font-lock-constant-face fontified t) 158 163 (fontified t)) . 614) (undo-tree-id20 . -163) (undo-tree-id21 . -128) (undo-tree-id22 . -135) (undo-tree-id23 . -126) (undo-tree-id24 . -135) (undo-tree-id25 . -140) (undo-tree-id26 . -163) (undo-tree-id27 . -140) (undo-tree-id28 . -163) (undo-tree-id29 . -3) (t 25336 60595 379145 704000)) nil (25336 60600 681893 842000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -613) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 614) nil (25336 60600 681882 842000) 0 nil])
([nil nil ((#("    let (mut device, mut factory) = gfx_device_gl::create(|s| window.get_proc_address(s) as *const std::os::raw::c_void);
    // Create the main color/depth targets.
    let aa = samples as gfx::texture::NumSamples;
    let dim = (WIDTH as u16, HEIGHT as u16, 1, aa.into());
    let color_format = <Srgba8 as Formatted>::get_format();
    let depth_format = <DepthStencil as Formatted>::get_format();
    let (output_color, output_stencil) =
        gfx_device_gl::create_main_targets_raw(dim,
                                               color_format.0,
                                               depth_format.0);
    let output_color = Typed::new(output_color);
    let output_stencil = Typed::new(output_stencil);
    
    let mut encoder = factory.create_command_buffer().into();
    let mut g2d = Gfx2d::new(opengl, &mut factory);

    let mut texture_context = TextureContext {
        factory: factory.clone(),
        encoder: factory.create_command_buffer().into(),
    };
    let bg = Texture::from_path(&mut texture_context,
                                \"IMG_1297.JPG\",
                                Flip::None,
                                &TextureSettings::new()).unwrap();" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 12 (face font-lock-keyword-face fontified t) 12 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 36 (fontified t) 36 49 (face font-lock-constant-face fontified t) 49 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 85 (fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-3-face) fontified t) 88 89 (fontified t) 89 91 (face font-lock-keyword-face fontified t) 91 93 (fontified t) 93 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 102 (face font-lock-constant-face fontified t) 102 104 (fontified t) 104 106 (face font-lock-constant-face fontified t) 106 108 (fontified t) 108 111 (face font-lock-constant-face fontified t) 111 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-2-face) fontified t) 120 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 166 (face font-lock-comment-face fontified t) 166 170 (fontified t) 170 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 176 (face font-lock-variable-name-face fontified t) 176 187 (fontified t) 187 189 (face font-lock-keyword-face fontified t) 189 190 (fontified t) 190 193 (face font-lock-constant-face fontified t) 193 195 (fontified t) 195 202 (face font-lock-constant-face fontified t) 202 204 (fontified t) 204 214 (face font-lock-type-face fontified t) 214 220 (fontified t) 220 223 (face font-lock-keyword-face fontified t) 223 224 (fontified t) 224 227 (face font-lock-variable-name-face fontified t) 227 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-2-face) fontified t) 231 236 (face font-lock-type-face fontified t) 236 237 (fontified t) 237 239 (face font-lock-keyword-face fontified t) 239 240 (fontified t) 240 243 (face font-lock-type-face fontified t) 243 245 (fontified t) 245 251 (face font-lock-type-face fontified t) 251 252 (fontified t) 252 254 (face font-lock-keyword-face fontified t) 254 255 (fontified t) 255 258 (face font-lock-type-face fontified t) 258 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-3-face) fontified t) 271 272 (face (rainbow-delimiters-depth-3-face) fontified t) 272 273 (face (rainbow-delimiters-depth-2-face) fontified t) 273 279 (fontified t) 279 282 (face font-lock-keyword-face fontified t) 282 283 (fontified t) 283 295 (face font-lock-variable-name-face fontified t) 295 298 (fontified t) 298 299 (face (rainbow-delimiters-depth-2-face) fontified t) 299 305 (face font-lock-type-face fontified t) 305 306 (fontified t) 306 308 (face font-lock-keyword-face fontified t) 308 309 (fontified t) 309 318 (face font-lock-type-face fontified t) 318 319 (face (rainbow-delimiters-depth-2-face) fontified t) 319 331 (fontified t) 331 332 (face (rainbow-delimiters-depth-2-face) fontified t) 332 333 (face (rainbow-delimiters-depth-2-face) fontified t) 333 339 (fontified t) 339 342 (face font-lock-keyword-face fontified t) 342 343 (fontified t) 343 355 (face font-lock-variable-name-face fontified t) 355 358 (fontified t) 358 359 (face (rainbow-delimiters-depth-2-face) fontified t) 359 371 (face font-lock-type-face fontified t) 371 372 (fontified t) 372 374 (face font-lock-keyword-face fontified t) 374 375 (fontified t) 375 384 (face font-lock-type-face fontified t) 384 385 (face (rainbow-delimiters-depth-2-face) fontified t) 385 397 (fontified t) 397 398 (face (rainbow-delimiters-depth-2-face) fontified t) 398 399 (face (rainbow-delimiters-depth-2-face) fontified t) 399 405 (fontified t) 405 408 (face font-lock-keyword-face fontified t) 408 409 (fontified t) 409 410 (face (rainbow-delimiters-depth-2-face) fontified t) 410 438 (fontified t) 438 439 (face (rainbow-delimiters-depth-2-face) fontified t) 439 450 (fontified t) 450 463 (face font-lock-constant-face fontified t) 463 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-2-face) fontified t) 489 552 (fontified t) 552 557 (fontified t) 557 618 (fontified t) 618 619 (face (rainbow-delimiters-depth-2-face) fontified t) 619 625 (fontified t) 625 628 (face font-lock-keyword-face fontified t) 628 629 (fontified t) 629 641 (face font-lock-variable-name-face fontified t) 641 644 (fontified t) 644 649 (face font-lock-type-face fontified t) 649 654 (fontified t) 654 655 (face (rainbow-delimiters-depth-2-face) fontified t) 655 667 (fontified t) 667 668 (face (rainbow-delimiters-depth-2-face) fontified t) 668 674 (fontified t) 674 677 (face font-lock-keyword-face fontified t) 677 678 (fontified t) 678 692 (face font-lock-variable-name-face fontified t) 692 695 (fontified t) 695 700 (face font-lock-type-face fontified t) 700 705 (fontified t) 705 706 (face (rainbow-delimiters-depth-2-face) fontified t) 706 720 (fontified t) 720 721 (face (rainbow-delimiters-depth-2-face) fontified t) 721 732 (fontified t) 732 735 (face font-lock-keyword-face fontified t) 735 736 (fontified t) 736 739 (face font-lock-keyword-face fontified t) 739 740 (fontified t) 740 747 (face font-lock-variable-name-face fontified t) 747 779 (fontified t) 779 780 (face (rainbow-delimiters-depth-2-face) fontified t) 780 781 (face (rainbow-delimiters-depth-2-face) fontified t) 781 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-2-face) fontified t) 787 788 (face (rainbow-delimiters-depth-2-face) fontified t) 788 794 (fontified t) 794 797 (face font-lock-keyword-face fontified t) 797 798 (fontified t) 798 801 (face font-lock-keyword-face fontified t) 801 802 (fontified t) 802 805 (face font-lock-variable-name-face fontified t) 805 808 (fontified t) 808 813 (face font-lock-type-face fontified t) 813 818 (fontified t) 818 819 (face (rainbow-delimiters-depth-2-face) fontified t) 819 827 (fontified t) 827 828 (face rust-ampersand-face fontified t) 828 831 (face font-lock-keyword-face fontified t) 831 839 (fontified t) 839 840 (face (rainbow-delimiters-depth-2-face) fontified t) 840 847 (fontified t) 847 850 (face font-lock-keyword-face fontified t) 850 851 (fontified t) 851 854 (face font-lock-keyword-face fontified t) 854 855 (fontified t) 855 870 (face font-lock-variable-name-face fontified t) 870 873 (fontified t) 873 887 (face font-lock-type-face fontified t) 887 888 (fontified t) 888 889 (face (rainbow-delimiters-depth-2-face) fontified t) 889 898 (fontified t) 898 905 (face font-lock-variable-name-face fontified t) 905 920 (fontified t) 920 921 (face (rainbow-delimiters-depth-3-face) fontified t) 921 922 (face (rainbow-delimiters-depth-3-face) fontified t) 922 932 (fontified t) 932 939 (face font-lock-variable-name-face fontified t) 939 970 (fontified t) 970 971 (face (rainbow-delimiters-depth-3-face) fontified t) 971 972 (face (rainbow-delimiters-depth-3-face) fontified t) 972 977 (fontified t) 977 978 (face (rainbow-delimiters-depth-3-face) fontified t) 978 979 (face (rainbow-delimiters-depth-3-face) fontified t) 979 985 (fontified t) 985 986 (face (rainbow-delimiters-depth-2-face) fontified t) 986 992 (fontified t) 992 995 (face font-lock-keyword-face fontified t) 995 996 (fontified t) 996 998 (face font-lock-variable-name-face fontified t) 998 1001 (fontified t) 1001 1008 (face font-lock-type-face fontified t) 1008 1019 (fontified t) 1019 1020 (face (rainbow-delimiters-depth-2-face) fontified t) 1020 1021 (face rust-ampersand-face fontified t) 1021 1024 (face font-lock-keyword-face fontified t) 1024 1074 (fontified t) 1074 1088 (face font-lock-string-face fontified t) 1088 1122 (fontified t) 1122 1126 (face font-lock-type-face fontified t) 1126 1128 (fontified t) 1128 1132 (face font-lock-type-face fontified t) 1132 1166 (fontified t) 1166 1167 (face rust-ampersand-face fontified t) 1167 1182 (face font-lock-type-face fontified t) 1182 1187 (fontified t) 1187 1188 (face (rainbow-delimiters-depth-3-face) fontified t) 1188 1189 (face (rainbow-delimiters-depth-3-face) fontified t) 1189 1190 (face (rainbow-delimiters-depth-2-face) fontified t) 1190 1194 (fontified t) 1194 1197 (fontified t) 1197 1198 (face (rainbow-delimiters-depth-2-face) fontified t) 1198 1199 (face (rainbow-delimiters-depth-2-face) fontified t) 1199 1200 (fontified t)) . 1562) (undo-tree-id62 . -669) (undo-tree-id63 . -1200) (undo-tree-id64 . -309) (undo-tree-id65 . -318) (undo-tree-id66 . -299) (undo-tree-id67 . -305) (undo-tree-id68 . -375) (undo-tree-id69 . -384) (undo-tree-id70 . -359) (undo-tree-id71 . -371) (undo-tree-id72 . -644) (undo-tree-id73 . -649) (undo-tree-id74 . -695) (undo-tree-id75 . -700) (undo-tree-id76 . -808) (undo-tree-id77 . -813) (undo-tree-id78 . -873) (undo-tree-id79 . -887) (undo-tree-id80 . -1001) (undo-tree-id81 . -1008) (undo-tree-id82 . -1122) (undo-tree-id83 . -1126) (undo-tree-id84 . -1167) (undo-tree-id85 . -1182) (undo-tree-id86 . -842) (undo-tree-id87 . -1200) (undo-tree-id88 . -1200) (t 25336 60600 689145 803000)) nil (25336 60620 819623 840000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1561) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 1562) nil (25336 60620 819598 587000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1566) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 1567) nil (25336 60620 819571 347000) 0 nil])
([nil nil ((1563 . 1567) (#("    " 0 4 (fontified nil)) . 1562) (undo-tree-id91 . -4) (#("    " 0 4 (fontified nil)) . -1566) (undo-tree-id92 . -4) (1570 . 1571) (t 25336 60620 819146 181000)) nil (25336 60738 581147 799000) 0 nil])
([nil nil ((1562 . 1566)) nil (25336 60738 581143 936000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1592 . 1593) (nil fontified nil 1566 . 1593) (1566 . 1593)) nil (25336 60738 581142 675000) 0 nil])
([nil nil ((1566 . 1570)) nil (25336 60738 581141 75000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1572) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 1573) nil (25336 60738 581138 517000) 0 nil])
([nil nil ((1574 . 1575) (1598 . 1599) (1572 . 1572) (1572 . 1574)) nil (25336 60738 581126 19000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -3167) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("d" 0 1 (fontified t)) . -3168) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 3169 (t 25336 60738 592481 716000)) nil (25336 60744 24880 63000) 0 nil])
([nil nil ((3167 . 3168)) nil (25336 60744 24865 719000) 0 nil])
([nil nil ((#("stencil, " 0 9 (fontified t)) . -3211) (undo-tree-id157 . -9) (undo-tree-id158 . -9) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -9) (undo-tree-id162 . -9) 3220 (t 25336 60744 35815 151000)) nil (25336 60752 569501 796000) 0 nil])
([nil nil ((#("output_" 0 7 (fontified t)) . -3204) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) 3211) nil (25336 60752 569464 244000) 0 nil])
([nil nil ((#("color, &" 0 7 (fontified t) 7 8 (face rust-ampersand-face fontified t)) . -3196) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -7) (undo-tree-id144 . -5) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -7) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) 3204) nil (25336 60752 569458 447000) 0 nil])
([nil nil ((#("output_" 0 7 (fontified t)) . -3189) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) 3196) nil (25336 60752 569450 91000) 0 nil])
([nil nil ((#("encoder, &" 0 9 (fontified t) 9 10 (face rust-ampersand-face fontified t)) . -3179) (undo-tree-id119 . -10) (undo-tree-id120 . -10) (undo-tree-id121 . -10) (undo-tree-id122 . -7) (undo-tree-id123 . -10) (undo-tree-id124 . -10) (undo-tree-id125 . -10) (undo-tree-id126 . -10) (undo-tree-id127 . -10) (undo-tree-id128 . -10) (undo-tree-id129 . -10) (undo-tree-id130 . -10) 3189) nil (25336 60752 569441 278000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3174) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("m" 0 1 (fontified t)) . -3175) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("u" 0 1 (fontified t)) . -3176) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("t" 0 1 (fontified t)) . -3177) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#(" " 0 1 (fontified t)) . -3178) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 3179) nil (25336 60752 569426 865000) 0 nil])
([nil nil ((#("device);" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (fontified t)) . -3674) (undo-tree-id176 . -8) (undo-tree-id177 . -8) (undo-tree-id178 . -6) 3682 (t 25336 60752 609148 645000)) nil (25336 60758 314947 983000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -3670) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) 3674) nil (25336 60758 314944 120000) 0 nil])
([nil nil ((#("flush(&" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (fontified t)) . -3663) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -7) (undo-tree-id171 . -7) 3670) nil (25336 60758 314939 249000) 0 nil])
([nil nil ((#("encoder." 0 8 (fontified t)) . -3655) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -7) (undo-tree-id166 . -8) (undo-tree-id167 . -8) 3663) nil (25336 60758 314931 557000) 0 nil])
([nil nil ((#("        if let Some(_) = e.after_render_args() {
	    device.cleanup();
	} " 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t) 74 75 (fontified t)) . 3678) (undo-tree-id258 . -75) (undo-tree-id259 . -75) (undo-tree-id260 . -27) (undo-tree-id261 . -44) (undo-tree-id262 . -54) (undo-tree-id263 . -60) (undo-tree-id264 . -48) (undo-tree-id265 . -75) (undo-tree-id266 . -75) (t 25336 60758 355815 419000)) nil (25336 60768 260381 831000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3671) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#(" " 0 1 (fontified t)) . -3672) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#(" " 0 1 (fontified t)) . -3673) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t)) . -3674) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t)) . -3675) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t)) . -3676) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("
" 0 1 (fontified t)) . -3677) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 3678) nil (25336 60768 259895 579000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3665) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#(" " 0 1 (fontified t)) . -3666) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#(" " 0 1 (fontified t)) . -3667) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#(" " 0 1 (fontified t)) . -3668) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#(" " 0 1 (fontified t)) . -3669) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#(" " 0 1 (fontified t)) . -3670) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) 3671) nil (25336 60768 259860 231000) 0 nil])
([nil nil ((apply -91 3938 4696 undo--wrap-and-run-primitive-undo 3938 4696 ((4691 . 4694) (4644 . 4647) (4644 . 4645) (#("	" 0 1 (fontified t)) . 4644) (4640 . 4644) (4591 . 4594) (4581 . 4584) (4534 . 4537) (4534 . 4535) (#("	" 0 1 (fontified t)) . 4534) (4530 . 4534) (4477 . 4480) (4467 . 4470) (4420 . 4423) (4420 . 4421) (#("	" 0 1 (fontified t)) . 4420) (4416 . 4420) (4371 . 4374) (4361 . 4364) (4314 . 4317) (4314 . 4315) (#("	" 0 1 (fontified t)) . 4314) (4310 . 4314) (4261 . 4264) (4251 . 4254) (4204 . 4207) (4204 . 4205) (#("	" 0 1 (fontified t)) . 4204) (4200 . 4204) (4155 . 4158) (4145 . 4148) (4098 . 4101) (4098 . 4099) (#("	" 0 1 (fontified t)) . 4098) (4094 . 4098) (4049 . 4052) (4039 . 4042) (3992 . 3995) (3992 . 3993) (#("	" 0 1 (fontified t)) . 3992) (3988 . 3992) (3943 . 3946))) (t 25336 60768 269148 939000)) nil (25336 60782 506717 322000) 0 nil])
([nil nil ((3231 . 3232) (t 25336 60782 515815 873000)) nil (25336 60831 926349 128000) 0 nil])
([nil nil ((3510 . 3511)) nil (25336 60831 926347 266000) 0 nil])
([nil nil ((3630 . 3631)) nil (25336 60831 926342 763000) 0 nil])
([nil nil ((3240 . 3242) (t 25336 60831 965816 794000)) nil (25336 60854 56244 991000) 0 nil])
([nil nil ((3199 . 3202) (t 25336 60854 65817 204000)) nil (25336 60870 967587 822000) 0 nil])
([nil nil ((3202 . 3208)) nil (25336 60870 967586 618000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-constant-face fontified t)) . -3206) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -3207) (undo-tree-id280 . -1) (undo-tree-id281 . -1) 3208) nil (25336 60870 967584 778000) 0 nil])
([nil nil ((3206 . 3209)) nil (25336 60870 967579 716000) 0 nil])
([nil nil ((#("G" 0 1 (face font-lock-type-face fontified t)) . -3206) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3207) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3208) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 3209) nil (25336 60870 967577 683000) 0 nil])
([nil nil ((3206 . 3209)) nil (25336 60870 967570 362000) 0 nil])
([nil nil ((3206 . 3214) (#("gra" 0 3 (fontified nil)) . 3206) (3206 . 3209) (#("graphics" 0 8 (fontified nil)) . -3206) (3206 . 3214) (#("gra" 0 3 (face font-lock-constant-face fontified t)) . -3206) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -1) 3209) nil (25336 60870 967567 534000) 0 nil])
([nil nil ((3214 . 3218)) nil (25336 60870 967552 676000) 0 nil])
([nil nil ((3249 . 3254) (t 25336 60870 979150 855000)) nil (25336 60885 312468 382000) 0 nil])
([nil nil ((1570 . 1574)) nil (25336 60885 312463 405000) 0 nil])
([nil nil ((3539 . 3544) (t 25336 60885 322484 457000)) nil (25336 60896 728357 54000) 0 nil])
([nil nil ((3664 . 3669)) nil (25336 60896 728352 468000) 0 nil])
([nil nil ((3200 . 3201) (t 25336 60896 739151 337000)) nil (25336 60905 192548 7000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3254) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("m" 0 1 (fontified t)) . -3255) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("u" 0 1 (fontified t)) . -3256) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("t" 0 1 (fontified t)) . -3257) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#(" " 0 1 (fontified t)) . -3258) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) 3259 (t 25336 60905 202484 830000)) nil (25336 60933 176008 679000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3535) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("m" 0 1 (fontified t)) . -3536) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("u" 0 1 (fontified t)) . -3537) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("t" 0 1 (fontified t)) . -3538) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#(" " 0 1 (fontified t)) . -3539) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 3540 (t 25336 60933 219152 22000)) nil (25336 60940 676713 352000) 0 nil])
([nil nil ((3535 . 3536)) nil (25336 60940 676702 538000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3656) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("m" 0 1 (fontified t)) . -3657) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("u" 0 1 (fontified t)) . -3658) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("t" 0 1 (fontified t)) . -3659) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#(" " 0 1 (fontified t)) . -3660) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) 3661) nil (25336 60940 676696 493000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -987) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("8" 0 1 (fontified t)) . -988) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("8" 0 1 (fontified t)) . -989) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 990 (t 25336 60940 675818 829000)) nil (25336 61014 993979 238000) 0 nil])
([nil nil ((987 . 990)) nil (25336 61014 993962 579000) 0 nil])
([nil nil ((apply 91 3968 4634 undo--wrap-and-run-primitive-undo 3968 4634 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4633) (#("    " 0 4 (fontified t)) . 4589) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4593) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4543) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4536) (#("    " 0 4 (fontified t)) . 4492) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4496) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4442) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4435) (#("    " 0 4 (fontified t)) . 4391) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4395) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4349) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4342) (#("    " 0 4 (fontified t)) . 4298) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4302) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4252) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4245) (#("    " 0 4 (fontified t)) . 4201) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4205) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4159) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4152) (#("    " 0 4 (fontified t)) . 4108) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4112) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4066) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4059) (#("    " 0 4 (fontified t)) . 4015) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4019) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3973))) (t 25336 61015 35820 218000)) nil (25336 61034 828651 909000) 0 nil])
([nil nil ((3967 . 3971)) nil (25336 61034 828649 859000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -3967) (undo-tree-id332 . -1) (#("s" 0 1 (fontified t)) . -3968) (undo-tree-id333 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3969) (undo-tree-id334 . -1) (#(" " 0 1 (fontified t)) . -3970) (undo-tree-id335 . -1) 3971) nil (25336 61034 828644 597000) 0 nil])
([nil nil ((3967 . 3973) (t 25336 61034 869153 924000)) nil (25336 61049 289876 390000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -3971) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 3972) (undo-tree-id353 . -1)) nil (25336 61049 289874 641000) 0 nil])
([nil nil ((3971 . 3975)) nil (25336 61049 289870 865000) 0 nil])
([nil nil ((3971 . 3977) (#("pist" 0 4 (fontified nil)) . 3971) (3971 . 3975) (#("piston" 0 6 (fontified nil)) . -3971) (3971 . 3977) (#("pist" 0 4 (face font-lock-constant-face fontified t)) . -3971) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) 3975) nil (25336 61049 289868 609000) 0 nil])
([nil nil ((3977 . 3982)) nil (25336 61049 289863 66000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3979) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("i" 0 1 (fontified t)) . -3980) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("u" 0 1 (fontified t)) . -3981) (undo-tree-id345 . -1) (undo-tree-id346 . -1) 3982) nil (25336 61049 289860 973000) 0 nil])
([nil nil ((3979 . 3980)) nil (25336 61049 289854 0) 0 nil])
([nil nil ((3979 . 3984) (#("I" 0 1 (fontified nil)) . 3979) (3979 . 3980) (#("Input" 0 5 (fontified nil)) . -3979) (3979 . 3984) (#("I" 0 1 (face font-lock-type-face fontified t)) . -3979) (undo-tree-id339 . -1) (undo-tree-id340 . -1) 3980) nil (25336 61049 289852 115000) 0 nil])
([nil nil ((3984 . 3987)) nil (25336 61049 289847 964000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -3986) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) 3987) nil (25336 61049 289845 809000) 0 nil])
([nil nil ((3986 . 3987)) nil (25336 61049 289834 32000) 0 nil])
([nil nil ((3987 . 3988)) nil (25336 61049 289828 410000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -3986) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) 3987 (t 25336 61049 339154 195000)) nil (25336 61079 210408 437000) 0 nil])
([nil nil ((3986 . 3987)) nil (25336 61079 210403 422000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3986) (undo-tree-id358 . -1) 3987) nil (25336 61079 210402 370000) 0 nil])
([nil nil ((3986 . 3987)) nil (25336 61079 210400 312000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -3986) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 3987) nil (25336 61079 210398 705000) 0 nil])
([nil nil ((3986 . 3987)) nil (25336 61079 210394 678000) 0 nil])
([nil nil ((3986 . 3992) (#("B" 0 1 (fontified nil)) . 3986) (3986 . 3987) (#("Button" 0 6 (fontified nil)) . -3986) (3986 . 3992) (#("B" 0 1 (face font-lock-type-face fontified t)) . -3986) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 3987) nil (25336 61079 210388 980000) 0 nil])
([nil nil ((apply -94 3962 4755 undo--wrap-and-run-primitive-undo 3962 4755 ((4750 . 4753) (4703 . 4706) (4703 . 4704) (#("	" 0 1 (fontified t)) . 4703) (4699 . 4703) (4650 . 4653) (4640 . 4643) (4593 . 4596) (4593 . 4594) (#("	" 0 1 (fontified t)) . 4593) (4589 . 4593) (4536 . 4539) (4526 . 4529) (4479 . 4482) (4479 . 4480) (#("	" 0 1 (fontified t)) . 4479) (4475 . 4479) (4430 . 4433) (4420 . 4423) (4373 . 4376) (4373 . 4374) (#("	" 0 1 (fontified t)) . 4373) (4369 . 4373) (4320 . 4323) (4310 . 4313) (4263 . 4266) (4263 . 4264) (#("	" 0 1 (fontified t)) . 4263) (4259 . 4263) (4214 . 4217) (4204 . 4207) (4157 . 4160) (4157 . 4158) (#("	" 0 1 (fontified t)) . 4157) (4153 . 4157) (4108 . 4111) (4098 . 4101) (4051 . 4054) (4051 . 4052) (#("	" 0 1 (fontified t)) . 4051) (4047 . 4051) (4002 . 4005) (3967 . 3970))) (t 25336 61079 252488 88000)) nil (25336 61123 239222 117000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4796 . 4797) (nil fontified nil 4796 . 4797) (nil fontified nil 4795 . 4796) (nil fontified nil 4794 . 4795) (nil fontified nil 4793 . 4794) (nil fontified nil 4792 . 4793) (nil fontified nil 4785 . 4792) (nil fontified nil 4773 . 4785) (nil fontified nil 4772 . 4773) (nil fontified nil 4760 . 4772) (4760 . 4797) (t 25336 61123 282488 915000)) nil (25336 61129 13498 422000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -3264) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -3265) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 3266 (t 25336 61129 25822 356000)) nil (25339 25454 16287 770000) 0 nil])
([nil nil ((2871 . 2875) (t 25339 25454 26610 376000)) nil (25339 25516 160893 49000) 0 nil])
([nil nil ((2872 . 2876) (#("    " 0 4 (fontified nil)) . 2871) (undo-tree-id24 . -4) (2875 . 2876)) nil (25339 25516 160891 672000) 0 nil])
([nil nil ((2876 . 2883)) nil (25339 25516 160889 772000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -2881) (undo-tree-id22 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -2882) (undo-tree-id23 . -1) 2883) nil (25339 25516 160888 655000) 0 nil])
([nil nil ((2881 . 2885)) nil (25339 25516 160886 219000) 0 nil])
([nil nil ((2882 . 2888)) nil (25339 25516 160885 450000) 0 nil])
([nil nil ((216 . 241) (216 . 217) (2884 . 2884) (2884 . 2891) (#("Text" 0 4 (fontified nil)) . 2884) (2884 . 2888) (#("Texture (use gfx::handle::Texture)" 0 34 (fontified nil)) . -2884) (2884 . 2918) (#("Text" 0 4 (fontified t face font-lock-type-face)) . -2884) (undo-tree-id21 . -4) 2888) nil (25339 25516 160883 702000) 0 nil])
([nil nil ((2919 . 2924)) nil (25339 25516 160880 915000) 0 nil])
([nil nil ((2920 . 2927) (#("Text" 0 4 (fontified nil)) . 2920) (2920 . 2924) (#("Texture" 0 7 (fontified nil)) . -2920) (2920 . 2927) (#("Text" 0 4 (fontified t face font-lock-type-face)) . -2920) (undo-tree-id20 . -4) 2924) nil (25339 25516 160879 229000) 0 nil])
([nil nil ((2927 . 2931)) nil (25339 25516 160876 267000) 0 nil])
([nil nil ((2929 . 2933) (#("fr" 0 2 (fontified nil)) . 2929) (2929 . 2931) (#("from (as From)" 0 14 (fontified nil)) . -2929) (2929 . 2943) (#("fr" 0 2 (fontified t)) . -2929) (undo-tree-id18 . -2) (undo-tree-id19 . -2) 2931) nil (25339 25516 160874 731000) 0 nil])
([nil nil ((2933 . 2934)) nil (25339 25516 160871 463000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2933) (undo-tree-id17 . -1) 2934) nil (25339 25516 160870 57000) 0 nil])
([nil nil ((2934 . 2938) (2933 . 2935)) nil (25339 25516 160868 331000) 0 nil])
([nil nil ((2938 . 2942)) nil (25339 25516 160867 84000) 0 nil])
([nil nil ((242 . 276) (242 . 243) (2934 . 2934) (2934 . 2949) (#("TextureS" 0 8 (fontified nil)) . 2934) (2934 . 2942) (#("TextureSettings (use gfx_graphics::TextureSettings)" 0 51 (fontified nil)) . -2934) (2934 . 2985) (#("TextureS" 0 8 (fontified t face font-lock-type-face)) . -2934) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -3) (undo-tree-id12 . -4) (undo-tree-id13 . -5) (undo-tree-id14 . -6) (undo-tree-id15 . -7) (undo-tree-id16 . -8) 2942) nil (25339 25516 160864 698000) 0 nil])
([nil nil ((2984 . 2986)) nil (25339 25516 160853 998000) 0 nil])
([nil nil ((2986 . 2989) (#("new" 0 3 (fontified t)) . -2986) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (2986 . 2989)) nil (25339 25516 160852 121000) 0 nil])
([nil nil ((2989 . 2991)) nil (25339 25516 160844 333000) 0 nil])
([nil nil ((2992 . 2993)) nil (25339 25516 160839 112000) 0 nil])
([nil nil ((#("Texture::from(TextureSettings::new()); " 0 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 29 (fontified t face font-lock-type-face) 29 31 (fontified t) 31 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-3-face)) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 38 (fontified t) 38 39 (fontified t)) . -2955) (undo-tree-id25 . -18) (undo-tree-id26 . -14) (undo-tree-id27 . -14) (undo-tree-id28 . -14) (undo-tree-id29 . -14) (undo-tree-id30 . -14) (undo-tree-id31 . -14) (undo-tree-id32 . -14) (undo-tree-id33 . -14) (undo-tree-id34 . -14) (undo-tree-id35 . -35) (undo-tree-id36 . 4) (undo-tree-id37 . -18) (undo-tree-id38 . -39) (undo-tree-id39 . -39) (undo-tree-id40 . -7) (undo-tree-id41 . -18) (undo-tree-id42 . -39) 2994 (t 25339 25516 199943 20000)) nil (25339 25572 554794 315000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3034 . 3035) (nil fontified nil 2955 . 3035) (2955 . 3035)) nil (25339 25572 554771 849000) 0 nil])
([nil nil ((#("Texture" 0 7 (fontified t face font-lock-type-face)) . -2945) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -7) 2952 (t 25339 25572 596609 54000)) nil (25339 25589 633617 623000) 0 nil])
([nil nil ((#("bg: " 0 2 (fontified t face font-lock-variable-name-face) 2 4 (fontified t)) . -2941) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) 2945) nil (25339 25589 633611 787000) 0 nil])
([nil nil ((2941 . 2942)) nil (25339 25589 633604 671000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -2941) (undo-tree-id44 . -1) 2942) nil (25339 25589 633603 185000) 0 nil])
([nil nil ((2941 . 2942)) nil (25339 25589 633600 431000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t)) . -2941) (undo-tree-id43 . -1) 2942) nil (25339 25589 633597 950000) 0 nil])
([nil nil ((2941 . 2943)) nil (25339 25589 633587 706000) 0 nil])
([nil nil ((#(">" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2946) (2945 . 2947) (2945 . 2946) (#("<" 0 1 (fontified nil)) . -2945) (2945 . 2946) (t 25339 25589 643275 532000)) nil (25339 25616 809023 621000) 0 nil])
([nil nil ((2945 . 2946)) nil (25339 25616 809021 997000) 0 nil])
([nil nil ((2947 . 2950)) nil (25339 25616 809021 273000) 0 nil])
([nil nil ((2947 . 2957) (#("GlG" 0 3 (fontified nil)) . 2947) (2947 . 2950) (#("GlGraphics" 0 10 (fontified t face font-lock-type-face)) . -2947) (undo-tree-id71 . -10) (undo-tree-id72 . -10) (2947 . 2957) (#("GlG" 0 3 (fontified t face font-lock-type-face)) . -2947) (undo-tree-id73 . -3) (undo-tree-id74 . -3) 2950) nil (25339 25616 809019 779000) 0 nil])
([nil nil ((2957 . 2964)) nil (25339 25616 809015 173000) 0 nil])
([nil nil ((320 . 343) (320 . 321) (2961 . 2961) (2961 . 2969) (#("Gra" 0 3 (fontified nil)) . 2961) (2961 . 2964) (#("Graphics (use graphics::Graphics)" 0 33 (fontified nil)) . -2961) (2961 . 2994) (#("Gra" 0 3 (fontified t face font-lock-type-face)) . -2961) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) 2964) nil (25339 25616 809012 653000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2994) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 2995) nil (25339 25616 809002 882000) 0 nil])
([nil nil ((2994 . 2996) (t 25339 25616 819941 897000)) nil (25339 25630 81197 20000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-3-face))) . -3021) (undo-tree-id111 . -4) (undo-tree-id112 . -4) 3025 (t 25339 25630 119941 748000)) nil (25339 25641 983821 740000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face font-lock-type-face)) . -3015) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -3016) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -3017) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("h" 0 1 (fontified t face font-lock-type-face)) . -3018) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#(":" 0 1 (fontified t)) . -3019) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#(":" 0 1 (fontified t)) . -3020) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 3021) nil (25339 25641 983815 44000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -3029) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . 1) (undo-tree-id80 . -1) 3030) nil (25339 25641 983782 453000) 0 nil])
([nil current ((3540 . 3541) (t 25339 25641 993274 950000)) nil (25339 25653 981593 731000) 0 nil])
nil
